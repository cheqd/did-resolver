name: "Build & Test"
on:
  workflow_call:
defaults:
  run:
    shell: bash

jobs:

  unit-tests:
    name: "Unit Tests"
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version-file: ./go.mod
          cache: true

      - name: Install ginkgo
        run: |
          go install github.com/onsi/ginkgo/v2/ginkgo@latest

      - name: Run Golang unit tests
        working-directory: ./tests/unit/
        run: ginkgo -r --tags unit --race --randomize-all --randomize-suites --keep-going --trace

  integration-tests:
    name: "Integration Tests"
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: ${{ github.repository }}

    steps:
      - uses: actions/checkout@v4

      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: did-resolver-staging

      - name: Load Docker image
        run: docker image load --input did-resolver-staging.tar

      - name: Set up Docker container for test
        run: docker compose -f tests/docker-compose-testing.yml up --detach --no-build

      - uses: actions/setup-go@v5
        with:
          go-version-file: ./go.mod
          cache: true

      - name: Install ginkgo
        working-directory: ./..
        run: go install github.com/onsi/ginkgo/v2/ginkgo@latest

      - name: Run Ginkgo integration tests
        working-directory: ./tests/integration/rest
        run: |
          ginkgo -r --tags integration --race --randomize-suites --keep-going --trace --junit-report ./report-integration.xml

      - name: Show logs
        if: failure()
        working-directory: ./docker/localnet
        run: docker compose -f tests/docker-compose-testing.yml logs --tail --follow

      - name: Upload integration tests result
        uses: actions/upload-artifact@v4
        with:
          name: report-integration.xml
          path: tests/integration/rest/report-integration.xml
